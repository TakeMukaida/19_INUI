#include "includes.h"

OLED::OLED(I2C *instance){
    myi2c = instance;
    a = 1;
    data[0] = 0x00;
    data[1] = 0xB0;
    data[2] = 0x00;
    data[3] = 0x21;
    data[4] = 0x00;
    data[5] = 0x7F;
}

void OLED::OLED_clear(int l){
    char i, j, k;
    for(i = 0; i < 6; i++){
        switch(i){
            case 0 : data[i] = 0x00; break;
            case 1 : data[i] = 0xB0; break;
            case 2 : data[i] = 0x00; break;
            case 3 : data[i] = 0x21; break;
            case 4 : data[i] = 0x00; break;
            case 5 : data[i] = 0x7F; break;
        }
    }
    char send[129] = {0x40};
    for(k = 1; k < 129; k++){
        send[k] = l;
    }
    for(i = 0; i < 8; i++){
        data[1] = (0xB0 | i);
        myi2c->write(OLED_ID, data, 6, 0);
        for(j = 0; j < 16; j++){
            myi2c->write(OLED_ID, send, 129, 0);
        }
    }
}

void OLED::OLED_init(){
    char initial[43] = {0x00,0xAE,0x00,0xA8,0x3F,0x00,0xD3,0x00,0x00,0x40,0x00,0xA0,0x00,0xC0,0x00,0xDA,0x12,0x00,0x81,0xFF,0x00,0xA4,0x00,0xA6,0x00,0xD5,0x80,0x00,0x20,0x10,0x00,0x22,0x00,0x07,0x00,0x21,0x00,0x7F,0x00,0x8D,0x14,0x00,0xAF};
    myi2c->write(OLED_ID, &initial[0], 43, 0);
    OLED_clear(0);
}

void OLED::OLED_bar(char start, char line, char length){
    char smp[129] = {
        0x40, 
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
    };
    char i;
    for(i = 0; i < 6; i++){
        switch(i){
            case 0 : data[i] = 0x00; break;
            case 1 : data[i] = 0xB0; break;
            case 2 : data[i] = 0x00; break;
            case 3 : data[i] = 0x21; break;
            case 4 : data[i] = 0x00; break;
            case 5 : data[i] = 0x7F; break;
        }
    }
    if(line > 7){
        line = 0;
    }
    if(length > 128 - start){
        length = length%(128 - start);
    }
    data[1] |= line;
    data[4] |= start;
    myi2c->write(OLED_ID, data, 6, 0);
    myi2c->write(OLED_ID, smp, length + 1, 0);
}

void OLED::OLED_disp(char *send, char l, char m){  //data(9byte containing 0x40), line(0-7), SpaceBit(0-128))
    char i, n = 9;
    for(i = 0; i < 6; i++){
        switch(i){
            case 0 : data[i] = 0x00; break;
            case 1 : data[i] = 0xB0; break;
            case 2 : data[i] = 0x00; break;
            case 3 : data[i] = 0x21; break;
            case 4 : data[i] = 0x00; break;
            case 5 : data[i] = 0x7F; break;
        }
    }
    data[1] |= l;
    data[4] |= m;
    myi2c->write(OLED_ID, data, 6, 0);
    if(m > 120){
        n = 9 - (m - 120);
    }
    myi2c->write(OLED_ID, send, n, 0);
}

void OLED::OLED_disp_multi(char send, char l, char m, char n){  //data(containing 0x40), line(0-7), SpaceBit(0-128))
    data[0] = 0x00;
    data[1] = 0xB0;
    data[2] = 0x00;
    data[3] = 0x21;
    data[4] = 0x00;
    data[5] = 0x7F;
    data[1] |= l;
    data[4] |= m;
    myi2c->write(OLED_ID, data, 6, 0);
    if(m > 129 - n){
        n = n - (m - (129 - n));
    }
    myi2c->write(OLED_ID, &send, n, 0);
}

void OLED::OLED_line_clear(char l, char s){ //line space(8bit))
    char i;
    char clear[9] = {0x40};
    
    if(l > 7){
        l = l%6;
    }
    if(s > 128){
        s = s%128;
    }
    
    OLED_disp(clear, l, s);
    for(i = s / 8 + 1; i < 16; i++){
        OLED::OLED_disp(clear, l, i * 8);
    }
}

void OLED::Misaki_Ascii(char w, char l, char s){ //num line space
    char i;
    char ascii1_3[256] = { //all askii series use 752bytes
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 
        0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x00, //!
        0x00, 0x0A, 0x06, 0x00, 0x0A, 0x06, 0x00, 0x00, //"
        0x00, 0x40, 0xC4, 0x7C, 0xC6, 0x7C, 0x46, 0x04, //#
        0x00, 0x48, 0x54, 0xF4, 0x5E, 0x54, 0x24, 0x00, //$
        0x00, 0x84, 0x4A, 0x24, 0x10, 0x48, 0xA4, 0x42, //%
        0x00, 0x40, 0xAC, 0x92, 0xAA, 0x44, 0xB0, 0x80, //&
        0x00, 0x0A, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, //'
        0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x82, 0x00, //(
        0x00, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, //)
        0x00, 0x00, 0x44, 0x28, 0xFE, 0x28, 0x44, 0x00, //*
        0x00, 0x10, 0x10, 0x10, 0xFE, 0x10, 0x10, 0x10, //+
        0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, //,
        0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, //-
        0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, //.
        0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, ///
        0x00, 0x7C, 0x82, 0x82, 0x82, 0x82, 0x7C, 0x00, //0
        0x00, 0x00, 0x00, 0x84, 0xFE, 0x80, 0x00, 0x00, //1
        0x00, 0xC4, 0xA2, 0xA2, 0x92, 0x92, 0x8C, 0x00, //2
        0x00, 0x44, 0x82, 0x92, 0x92, 0x92, 0x6C, 0x00, //3
        0x00, 0x60, 0x50, 0x48, 0x44, 0xFE, 0x40, 0x00, //4
        0x00, 0x5E, 0x8A, 0x8A, 0x8A, 0x8A, 0x72, 0x00, //5
        0x00, 0x7C, 0x92, 0x92, 0x92, 0x92, 0x64, 0x00, //6
        0x00, 0x02, 0x02, 0xC2, 0x32, 0x0A, 0x06, 0x00, //7
        0x00, 0x6C, 0x92, 0x92, 0x92, 0x92, 0x6C, 0x00, //8
        0x00, 0x4C, 0x92, 0x92, 0x92, 0x92, 0x7C, 0x00, //9
        0x00, 0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00, 0x00, //:
        0x00, 0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, //;
        0x00, 0x00, 0x00, 0x10, 0x28, 0x44, 0x82, 0x00, //<
        0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, //=
        0x00, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00, //>
        0x00, 0x04, 0x02, 0xA2, 0x12, 0x12, 0x0C, 0x00  //?
    };
    char ascii2_3[256] = {
        0x00, 0x38, 0x44, 0xB2, 0xAA, 0x9A, 0x24, 0x18, //@
        0xC0, 0x30, 0x2C, 0x22, 0x2C, 0x30, 0xC0, 0x00, //A
        0x00, 0xFE, 0x92, 0x92, 0x92, 0x92, 0x6C, 0x00, //B
        0x00, 0x38, 0x44, 0x82, 0x82, 0x82, 0x44, 0x00, //C
        0x00, 0xFE, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, //D
        0x00, 0xFE, 0x92, 0x92, 0x92, 0x92, 0x82, 0x00, //E
        0x00, 0xFE, 0x12, 0x12, 0x12, 0x12, 0x02, 0x00, //F
        0x00, 0x38, 0x44, 0x82, 0x92, 0x92, 0x74, 0x00, //G
        0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0xFE, 0x00, //H
        0x00, 0x00, 0x00, 0x82, 0xFE, 0x82, 0x00, 0x00, //I
        0x00, 0x40, 0x80, 0x80, 0x80, 0x80, 0x7E, 0x00, //J
        0x00, 0xFE, 0x20, 0x10, 0x28, 0x44, 0x82, 0x00, //K
        0x00, 0xFE, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, //L
        0x00, 0xFE, 0x04, 0x18, 0x60, 0x18, 0x04, 0xFE, //M
        0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0xFE, 0x00, //N
        0x00, 0x38, 0x44, 0x82, 0x82, 0x44, 0x38, 0x00, //O
        0x00, 0xFE, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, //P
        0x00, 0x38, 0x44, 0x82, 0xA2, 0x44, 0xB8, 0x00, //Q
        0x00, 0xFE, 0x12, 0x12, 0x32, 0x52, 0x8C, 0x00, //R
        0x00, 0x4C, 0x92, 0x92, 0x92, 0x92, 0x64, 0x00, //S
        0x00, 0x02, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x02, //T
        0x00, 0x7E, 0x80, 0x80, 0x80, 0x80, 0x7E, 0x00, //U
        0x00, 0x06, 0x18, 0x60, 0x80, 0x60, 0x18, 0x06, //V
        0x00, 0x3E, 0xC0, 0x30, 0x0C, 0x30, 0xC0, 0x3E, //W
        0x00, 0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, //X
        0x00, 0x02, 0x04, 0x08, 0xF0, 0x08, 0x04, 0x02, //Y
        0x00, 0x82, 0xC2, 0xA2, 0x92, 0x8A, 0x86, 0x00, //Z
        0x00, 0x00, 0x00, 0x00, 0xFE, 0x82, 0x82, 0x00, //[
        0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, //reverce/
        0x00, 0x82, 0x82, 0xFE, 0x00, 0x00, 0x00, 0x00, //]
        0x00, 0x00, 0x00, 0x04, 0x02, 0x04, 0x00, 0x00, //^
        0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80  //_
    };
    char ascii3_3[256] = {
        0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, //`
        0x00, 0x00, 0x40, 0xA8, 0xA8, 0xA8, 0xF0, 0x00, //a
        0x00, 0x00, 0xFE, 0x90, 0x88, 0x88, 0x70, 0x00, //b
        0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x50, 0x00, //c
        0x00, 0x00, 0x70, 0x88, 0x88, 0x90, 0xFE, 0x00, //d
        0x00, 0x00, 0x70, 0xA8, 0xA8, 0xA8, 0x30, 0x00, //e
        0x00, 0x00, 0x00, 0x08, 0xFC, 0x0A, 0x02, 0x00, //f
        0x00, 0x00, 0x10, 0xA8, 0xA8, 0xA8, 0x78, 0x00, //g
        0x00, 0x00, 0xFE, 0x10, 0x08, 0x08, 0xF0, 0x00, //h
        0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, //i
        0x00, 0x00, 0x40, 0x80, 0x80, 0x7A, 0x00, 0x00, //j
        0x00, 0x00, 0xFE, 0x20, 0x50, 0x88, 0x00, 0x00, //k
        0x00, 0x00, 0x00, 0x02, 0xFE, 0x00, 0x00, 0x00, //l
        0x00, 0x00, 0xF8, 0x08, 0xF0, 0x08, 0xF0, 0x00, //m
        0x00, 0x00, 0xF8, 0x10, 0x08, 0x08, 0xF0, 0x00, //n
        0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, //o
        0x00, 0x00, 0xF8, 0x28, 0x28, 0x28, 0x10, 0x00, //p
        0x00, 0x00, 0x10, 0x28, 0x28, 0x28, 0xF8, 0x00, //q
        0x00, 0xF8, 0x10, 0x08, 0x08, 0x08, 0x10, 0x00, //r
        0x00, 0x00, 0x90, 0xA8, 0xA8, 0xA8, 0x48, 0x00, //s
        0x00, 0x00, 0x08, 0x7C, 0x88, 0x88, 0x40, 0x00, //t
        0x00, 0x00, 0x78, 0x80, 0x80, 0x40, 0xF8, 0x00, //u
        0x00, 0x00, 0x18, 0x60, 0x80, 0x60, 0x18, 0x00, //v
        0x00, 0x00, 0x38, 0xC0, 0x30, 0xC0, 0x38, 0x00, //w
        0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, //x
        0x00, 0x00, 0x88, 0xB0, 0x40, 0x30, 0x08, 0x00, //y
        0x00, 0x00, 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x00, //z
        0x00, 0x00, 0x00, 0x10, 0x6C, 0x82, 0x82, 0x00, //{
        0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, //|
        0x00, 0x82, 0x82, 0x6C, 0x10, 0x00, 0x00, 0x00, //}
        0x00, 0x00, 0x02, 0x04, 0x02, 0x04, 0x00, 0x00, //~
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 
    };
    char send[9] = {0x40};
    if(w < 0x20)
        w = 0x20;
    if(w > 0x7F)
        w = 0x7F;
    if(w >= 0x20 && w <= 0x3F){
        for(i = 1; i < 9; i++){
            send[i] = ascii1_3[(w - 0x20) * 8 + (i - 1)];
        } 
    }
    if(w >= 0x40 && w <= 0x5F){
        for(i = 1; i < 9; i++){
            send[i] = ascii2_3[(w - 0x40) * 8 + (i - 1)];
        } 
    }
    if(w >= 0x60 && w <= 0x7F){
        for(i = 1; i < 9; i++){
            send[i] = ascii3_3[(w - 0x60) * 8 + (i - 1)];
        } 
    }
    OLED::OLED_disp(send, l, s);
}

void OLED::OLED_printf(char moji[], char l){
    for(int i = 0; moji[i]; i++){
        OLED::Misaki_Ascii(moji[i], l, 8 * i);
    }
    
    return ;
}

OLED::~OLED(){
    
}